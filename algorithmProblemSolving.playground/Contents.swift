import Foundation

//Problem Archives -> https: //projecteuler.net/archives

print(" problema 1 - If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3,5,6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.")
var soma: Int = 0

@MainActor
func somaMultiplosDeTresOuCinco(ateLimite limite: Int) -> Int {
    for numero in 1..<limite {
        if numero % 3 ==0 || numero % 5 == 0 {
            soma += numero
        }
    }
}

let multiploDe10: Int = somaMultiplosDeTresOuCinco(ateLimite: 10)
print("A soma total dos números múltiplos de 5 ou 3, abaixo de 1000 é igual a \(multiploDe10)\n ")

/*
var sum: Int = 0

@MainActor
func sumMultiplesOfThreeOrFive(ofLimit limit: Int) -> Int {
    
    for number in 1..<limit {
        if number % 3 == 0 || number % 5 == 0 {
            sum += number
        }
    }
    
    return sum
}

let multipleTen = sumMultiplesOfThreeOrFive(ofLimit: 10)
print("A soma total dos números múltiplos de 5 ou 3, abaixo de 1000 é igual a \(multipleTen)\n ")

var number: Int = 0
for numCode in 1..<10 {
     
    if (numCode % 3 == 0) || (numCode % 5 == 0){
        
        number += numCode
        //print(numCode)
    }
}
print("A soma total dos números abaixo de 10 é igual a \(number).")

number = 0
for numMil in 1..<1000 {
    
    if (numMil % 3 == 0) || (numMil % 5 == 0){
       
        number += numMil
        //print(numMil)
    }
}
print("A soma total dos números abaixo de 1000 é igua a \(number).")

func sumMultiples(ofLimit limit: Int) -> Int {
    
   var sum: Int = 0
    
    for number in 1..<limit {
        if number % 3 == 0 || number % 5 == 0 {
            sum += number
        }
    }
    
    return sum
}

let result1 = sumMultiples(ofLimit: 10)
print("A função soma total dos números abaixo de 10 é igual a \(result1).")
let result2 = sumMultiples(ofLimit: 1000)
print("A função soma total dos números abaixo de 1000 é igual a \(result2).")
let result3 = sumMultiples(ofLimit: 3000)
print("A função soma total dos números abaixo de 3000 é igual a \(result3).")

/ *
print(" problema 2 - Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1,2,3,5,8,13,21,34,55,89,... By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.")

func fibonacci(ofLimit limit: Int) -> Int {
    var number1: Int = 1
    var number2: Int = 2
    var sum: Int = 0
    
    while number2 <= limit {
        
        if number2 % 2 == 0 {
            sum += number2
        }
        let temp = number1 + number2
        number1 = number2
        number2 = temp
    }
    return sum
}

print("A soma total dos números pares da sequência de Fibonacci até 4.000.000 é igual a \(fibonacci(ofLimit: 4_000_000)).")

// Função para gerar e imprimir a sequência de Fibonacci até um limite
 
func generateFibonacci(upTo limit: Int) -> [Int] {
    var number1 = 1
    var number2 = 2
    var fibonacciSequence: [Int] = [number1, number2]

    while true {
        let nextNumber = number1 + number2
        if nextNumber > limit {
            break
        }
        fibonacciSequence.append(nextNumber)
        number1 = number2
        number2 = nextNumber
    }

    // Imprimir a sequência completa
    print("Sequência de Fibonacci até \(limit):")
    for number in fibonacciSequence {
        if number % 2 == 0 {
            print("\(number) (par)")
        } else {
            print(number)
        }
    }

    return fibonacciSequence
}
let evenSumOdd = generateFibonacci(upTo: 10)
print("Sequência de Fibonacci até 10, é igual a \(evenSumOdd).")

// Função para somar apenas os números pares da sequência
func sumEvenFibonacciNumbersPair(from sequence: [Int]) -> Int {
    let evenNumbers = sequence.filter { $0 % 2 == 0 }
    return evenNumbers.reduce(0, +)
}

// Função para somar apenas os números ímpares da sequência
func sumEvenFibonacciNumbersOdd(from sequence: [Int]) -> Int {
    let evenNumbers = sequence.filter { $0 % 2 != 0 }
    return evenNumbers.reduce(0, +)
}


// Uso
let fibonacciSeq = generateFibonacci(upTo: 4_000_000)
let evenSumPair = sumEvenFibonacciNumbersPair(from: fibonacciSeq)
print("A soma total dos números pares da sequência de Fibonacci até 4_000_000 é igual a \(evenSumPair).")

let evenSum = sumEvenFibonacciNumbersOdd(from: fibonacciSeq)
print("A soma total dos números ímpares da sequência de Fibonacci até 4_000_000 é igual a \(evenSum).")
print("--------3---------")
print("--- 3 problema - Os fatores primos de 13195 são 5, 7, 13, 29. Qual é o maior fator primo do número 600851475143 ? ---")
          
func isPrime(ofNumber number: Int) -> Bool {
    if number <= 1 { return false }
    if number == 2 { return true }
    
    //sqrt()é uma função da biblioteca padrão: -> "square root" → raiz quadrada.
    //(sqrt (Double (number))) ->  converte Int para Double
    for i in 2...Int(sqrt (Double (number))) {
        if number % i == 0 {
            return false
        } else {
        }
    }
    return true
}

let isNumberPrimo1 = isPrime(ofNumber: 600851475143)
print(" O número 600851475143 é primo ? \(isNumberPrimo1)")
let isNumberPrimo2 = isPrime(ofNumber: 600851475143)
print(" O número 600851475143 é primo ? \(isNumberPrimo2)")
let isNumberPrimo3 = isPrime(ofNumber: 7)
print(" O número 7 é primo ? \(isNumberPrimo3)")

func isNumPrime(ofNumber number: Int) -> Bool {
    if number <= 1 { return false }
    if number == 2 {
        print("\(number) - É primo.")
        return true
    }

    for i in 2...Int(sqrt(Double(number))) {
        if number % i == 0 {
            print("\(number) - Não é primo (divisível por \(i)).")
            return false
        }
    }

    print("\(number) - É primo.")
    return true
}

let isNumberPrimo5 = isNumPrime(ofNumber: 600851475143)
print("O número 600851475143 é primo? \(isNumberPrimo5)")

let isNumberPrimo6 = isNumPrime(ofNumber: 600851475143)
print("O número 600851475143 é primo? \(isNumberPrimo6)")

let isNumberPrimo7 = isNumPrime(ofNumber: 7)
print("O número 7 é primo? \(isNumberPrimo7)")

/*
 Crivo de Eratóstenes
 Lógica:
 
 1- Comece com uma lista de números de 2 até um limite.

 2- Elimine os múltiplos de 2 (exceto o próprio 2).

 3- Vá para o próximo número não excluído e elimine seus múltiplos.

 4- Continue até o final.

 5- Os que sobrarem são primos.
 */

func sieveOfEratosthenes(limit: Int) -> [Int] {
    var isPrime = [Bool](repeating: true, count: limit + 1)
    isPrime[0] = false
    isPrime[1] = false

    for i in 2...Int(sqrt(Double(limit))) {
        if isPrime[i] {
            for multiple in stride(from: i * i, through: limit, by: i) {
                isPrime[multiple] = false
            }
        }
    }

    return (2...limit).filter { isPrime[$0] }
}

let primesUpTo100 = sieveOfEratosthenes(limit: 100)
print(primesUpTo100)

func generatePrimes(ofLimit limit: Int) -> [Int] {
    var primes: [Int] = []

    for number in 2...limit {
        var isPrime = true
        
        if number > 3 {
            // Testa divisores de 2 até number / 2
            for divisor in 2...(number / 2) {
                if number % divisor == 0 {
                    isPrime = false
                    break
                }
            }
        }

        if isPrime {
            primes.append(number)
        }
    }

    return primes
}

let primesUpTo = generatePrimes(ofLimit: 50)
print("Primos até 50:", primesUpTo)

// função para fatorar com num primos:
func primeFactors(of number: Int) -> [Int] {
    var n = number
    var factors: [Int] = []
    var divisor = 2

    while n > 1 {
        if n % divisor == 0 {
            factors.append(divisor)
            n /= divisor
        } else {
            divisor += 1
        }
    }

    return factors
}

let fatores = primeFactors(of: 13195)
print("Fatores primos de 13195 são:", fatores)

let respostaProblema3 = primeFactors(of: 600851475143)
print("A resposta do Problema 3 -> Os fatores primos de 600851475143 são:", respostaProblema3)

 
 /*
  problema 4
  Um número palíndromo é lido da mesma forma em ambas as direções. O maior palíndromo formado pelo produto de dois
  números de -dígitos são
  .

  Encontre o maior palíndromo feito do produto de dois
  números de -dígitos.
  */

func isPalindrome(_ number: Int) -> Bool {
    let str = String(number)
    return str == String(str.reversed())
}

func largestPalindromeProduct(digits: Int) -> (palindrome: Int, factor1: Int, factor2: Int)? {
    let max = Int(pow(100.0, Double(digits))) - 1
    let min = Int(pow(100.0, Double(digits - 1)))
    
    var maxPalindrome = 0
    var result = (0, 0, 0)
    
    for i in stride(from: max, through: min, by: -1) {
        
        if i * i < maxPalindrome {
            break
        }
        
        for j in stride(from: i, through: min, by: -1) {
            let product = i * j
            
            if product < maxPalindrome {
                break
            }
            
            if isPalindrome(product) {
                maxPalindrome = product
                result = (product, i, j)
            }
        }
    }
    return result.0 > 0 ? result : nil
}

if let result = largestPalindromeProduct(digits: 2) {
    print("Maior palíndromo (2 dígitos): \(result.palindrome) = \(result.factor1) × \(result.factor2)")
}

if let result = largestPalindromeProduct(digits: 3) {
    print("Maior palíndromo (3 dígitos): \(result.palindrome) = \(result.factor1) × \(result.factor2)")
}


func isDivisibleByAll(_ n: Int, upTo max: Int) -> Bool {
    for i in 1...max {
        if n % 1 != 0 {
            return false
        }
    }
    return true
}

func smallestMultiple(upTo max: Int) -> Int {
    var n = max
    
    while true {
        if isDivisibleByAll(n, upTo: max) {
            return n
        }
        n += 1
    }
}

let result = smallestMultiple(upTo: 100)
print("O menor múltiplo comum de 1 até 10 é: \(result)")


/*
 problema 5
 2520 é o menor número que pode ser dividido por cada um dos números de 1 até 10 com resto igual a 0.

 Qual é o menor número positivo que é igualmente divisível por todos os números de 1 até 20 ?
 */
func greatestCommonDivisor(_ number1: Int, _ number2: Int) -> Int { //MDC
    var number1 = number1
    var number2 = number2
    while number2 != 0 {
        let temp = number2
        number2 = number1 % number2
        number1 = temp
    }
    return number1
}

func leastCommonMultiple(_ number1: Int, _ number2: Int) -> Int { //MMC
    return (number1 * number2) / greatestCommonDivisor(number1, number2)
}

func smallestMultiple(upTo max: Int) -> Int {
    var result = 1
    for i in 2...max {
        result = leastCommonMultiple(result, i)
    }
    return result
}

let resultado = smallestMultiple(upTo: 10)
print("🔢 Menor múltiplo comum de 1 a 10 é: \(resultado)") // → 2520

let resultado2 = smallestMultiple(upTo: 20)
print("🔢 Menor múltiplo comum de 1 a 20 é: \(resultado2)") //232792560

extension Int {
    
    func mdc(com outro: Int) -> Int {
        var a = self
        var b = outro
        while b != 0 {
            (a, b) = (b, a % b)
        }
        return a
    }
    
    func mmc(com outro: Int) -> Int {
        return (self * outro) / self.mdc(com: outro)
    }
}

func smallestMultiple2(upTo max: Int) -> Int {
    var result = 1
    for i in 2...max {
        result = result.mmc(com: i)
    }
    return result
}

let menorMultiplo10 = smallestMultiple(upTo: 10)
print("🔢 Menor múltiplo comum de 1 a 10 é: \(menorMultiplo10)") // → 2520

let menorMultiplo20 = smallestMultiple(upTo: 20)
print("🔢 Menor múltiplo comum de 1 a 20 é: \(menorMultiplo20)") //232792560
 
 
 extension Int {
     func maiorDivisorComum(com outro: Int) -> Int {
         var a = self
         var b = outro
         while b != 0 {
             (a, b) = (b, a % b)
         }
         return a
     }

     func menorMultiploComum(com outro: Int) -> Int {
         return (self * outro) / self.maiorDivisorComum(com: outro)
     }
 }

 func menorMultiploComum(ate numero: Int) -> Int {
     var resultado = 1
     for i in 2...numero {
         resultado = resultado.menorMultiploComum(com: i)
     }
     return resultado
 }

 // Uso:
 let resultado3 = menorMultiploComum(ate: 10)
 print("Menor múltiplo comum de 1 até 10 é: \(resultado3)") // 2.520

let resultado4 = menorMultiploComum(ate: 20)
print("Menor múltiplo comum de 1 até 20 é: \(resultado4)") // 232.792.560

 */
 

